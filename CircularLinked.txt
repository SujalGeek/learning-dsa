// #include <iostream>

// using namespace std;
// class Node
// {
// public:
//   int data;
//   Node *next;
//   Node(int d)
//   {
//     this->data = d;
//     this->next = NULL;
//   }
//   ~Node()
//   {
//     int val = this->data;
//     if (this->next != NULL)
//     {
//       delete next;
//       next = NULL;
//     }
//     cout << "memory free from data " << val;
//   }
// };
// void insertNode(Node *&tail, int element, int d)
// {
//   if (tail == NULL)
//   {
//     Node *newnode = new Node(d);
//     tail = newnode;
//     newnode->next = newnode;
//   }
//   else
//   {
//     Node *curr = tail;
//     while (curr->data != element)
//     {
//       curr = curr->next;
//     }
//     Node *temp = new Node(d);
//     temp->next = curr->next;
//     curr->next = temp;
//   }
// }
// void print(Node *tail)
// {
//   Node *temp = tail;
//   do
//   {
//     cout << tail->data << " ";
//     tail = tail->next;
//   } while (tail != temp);
//   cout << endl;
// }
// void deleteNode(Node *&tail, int value)
// {
//   if (tail == NULL)
//   {
//     cout << "list is empty";
//     return;
//   }
//   else
//   {
//     Node *prev = tail;
//     Node *curr = prev->next;
//     while (curr->data != value)
//     {
//       prev = curr;
//       curr = curr->next;
//     }
//     prev->next = curr->next;
//     if (tail == curr)
//     {
//       tail = prev;
//     }
//     curr->next = NULL;
//     delete curr;
//   }
// }
// int main()
// {
//   Node *tail = NULL;
//   insertNode(tail, 5, 3);
//   print(tail);
//   insertNode(tail, 3, 5);
//   print(tail);
//   insertNode(tail, 5, 9);
//   print(tail);
//   return 0;
// }

#include <iostream>
using namespace std;

class node
{
public:
  int data;
  node *next;

  node()
  {
    this->data = 0;
    this->next = NULL;
  }

  node(int data)
  {
    this->data = data;
    this->next = NULL;
  }
};

void insertAtFront(node *&head, int data)
{
  if (head == NULL)
  {
    head = new node(data);
    head->next = head;
  }
  else
  {
    node *tmp = head;
    while (tmp->next != head)
    {
      tmp = tmp->next;
    }
    node *New = new node(data);
    New->next = head;
    tmp->next = New;
    head = New;
  }
}

void deleteAtEnd(node *&head)
{
  if (head == NULL)
  {
    cout << "List is empty!!" << endl;
  }
  else if (head->next == head)
  {
    delete (head);
    head = NULL;
  }
  else
  {
    node *tmp = head;
    while ((tmp->next)->next != head)
    {
      tmp = tmp->next;
    }
    delete (tmp->next);
    tmp->next = head;
  }
}

void display(node *head)
{
  if (head == NULL)
  {
    cout << "List is empty!!" << endl;
  }
  else
  {
    node *tmp = head;
    while (tmp->next != head)
    {
      cout << tmp->data << " ";
      tmp = tmp->next;
    }
    cout << tmp->data << endl;
  }
}

int main()
{
  node *head = NULL;
  insertAtFront(head, 2);
  insertAtFront(head, 1);
  display(head);
  deleteAtEnd(head);
  display(head);
  insertAtFront(head, 0);
  display(head);
  return 0;
}